const dtsCssModulesLoader = {
	loader: require.resolve('dts-css-modules-loader'),
	options: {
		namedExport: true,
		/** @param {string[]} classes */
		customTypings: (classes) => {


			const typings = [
				'// This file is automatically generated. Do not modify this file manually -- YOUR CHANGES WILL BE ERASED!'
			];

			for (const name of classes) {
				typings.push(`export const ${name}: string;`);
			}

			typings.push(
				''
			);

			return typings.join('\n');
		}
	}
};

/** @type {import('gatsby').GatsbyNode} */
module.exports = {
	onCreateWebpackConfig: ({ getConfig, actions }) => {
		/** @type {import('webpack').Configuration} */
		const config = getConfig();

		if (!config.module?.rules) {
			return;
		}

		for (const rule of config.module.rules) {
			if (typeof rule === 'string') {
				return;
			}

			if ('oneOf' in rule && rule.oneOf !== undefined) {
				for (const oneOf of rule.oneOf) {
					injectBeforeCSSLoader(oneOf);
				}
			}
			else {
				injectBeforeCSSLoader(rule);
			}
		}

		actions.replaceWebpackConfig(config);
	}
}

/**
 * Place the `dts-css-modules-loader` before the `css-loader` if it exist.
 *
 * @param {import('webpack').RuleSetRule} rule
 * @returns {void}
 */
function injectBeforeCSSLoader (rule) {
	if (!Array.isArray(rule.use)) {
		return;
	}

	const cssLoaderPath = require.resolve('css-loader');

	for (let index = 0; index < rule.use.length; index++) {
		const loader = rule.use[index];

		if (
			(typeof loader === 'string' && loader === cssLoaderPath) ||
			(typeof loader === 'object' && loader !== null && loader.loader === cssLoaderPath)
		) {
			rule.use.splice(index, 0, dtsCssModulesLoader);

			return;
		}
	}
}
