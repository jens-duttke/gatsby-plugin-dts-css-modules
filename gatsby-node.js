/** These interfaces are simplified versions from `gatsby/index.d.ts` and `webpack/types.d.ts` */
/** @typedef {'develop' | 'develop-html' | 'build-html' | 'build-javascript'} BabelStageKeys */
/** @typedef {{ replaceWebpackConfig(config: object, plugin?: { name: string; }): void }} Actions */
/** @typedef {any} RuleSetRule */
/** @typedef {{ module: { rules: (RuleSetRule | { oneOf: RuleSetRule[]; })[]; }; }} WebpackConfiguration */

const dtsCssModulesLoader = {
	loader: require.resolve('dts-css-modules-loader'),
	options: {
		namedExport: true,
		/** @param {string[]} classes */
		customTypings: (classes) => {
			const typings = [
				'// This file is automatically generated. Do not modify this file manually -- YOUR CHANGES WILL BE ERASED!'
			];

			for (const name of classes) {
				typings.push(`export const ${name}: string;`);
			}

			typings.push(
				''
			);

			return typings.join('\n');
		}
	}
};

/**
 * @param {Object} args
 * @param {BabelStageKeys} args.stage
 * @param {() => WebpackConfiguration} args.getConfig
 * @param {Actions} args.actions
 * @returns
 */
module.exports.onCreateWebpackConfig = ({ stage, getConfig, actions }) => {
	if (!['develop', 'develop-html'].includes(stage)) {
		return;
	}

	const config = getConfig();

	for (const rule of config.module.rules) {
		if ('oneOf' in rule) {
			for (const oneOf of rule.oneOf) {
				if (oneOf.test instanceof RegExp && oneOf.test.test('styles.module.scss')) {
					oneOf.use.splice(1, 0, dtsCssModulesLoader);
				}
			}

			continue;
		}

		if (rule.test instanceof RegExp && rule.test.test('styles.module.scss')) {
			rule.use.splice(1, 0, dtsCssModulesLoader);
		}
	}

	actions.replaceWebpackConfig(config);
};
